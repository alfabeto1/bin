#!/usr/bin/perl
#==============================================================================#
# POD                                                                          #
#==============================================================================#
# {{{
=encoding utf-8

=head1 NAME

B<width> - determine the printing widths of input lines

=head1 SYNOPSIS

=over 4

=item width [-v] [-t] F<FILE>

=back

=head1 DESCRIPTION

General-purpose text filter tool that helps you work with the printing width or
length of lines of input text.  For example, it can print the width, location
and/or content for its longest line or lines of input, or for all lines.
For example,

    % head -5 access.log | width -awnl
    63:1:22.56.17.4 - 04/Dec/2000:04:08:53 GET /pub HTTP/1.0 408 - 23146
    63:4:c1.aici.com - 04/Dec/2000:13:25:00 GET / HTTP/1.1 200 8135 8850

=head1 OPTIONS

=over 4

=item     -a  ???????

=item     -A  display all lines

=item     -c  use number of characters instead of printing width

=item     -f  display filenames

=item     -h  display just this help message

=item     -l  display lines

=item     -n  display line numbers

=item     -p  display processed lines instead of raw lines

=item     -w  display line widths

=item     default is -wfnl of the first longest line\n";

=back

=head1 TO DO

This command doesn't have a proper documentation, nor my common options.

To be adapted to my toolbox way of work.

=head1 COPYRIGHT & LICENSE

Steve Kinzler <kinzler@cs.indiana.edu>, Oct 93

=head1 AUTHOR

Steve Kinzler <kinzler@cs.indiana.edu>, Oct 93

see website http://www.cs.indiana.edu/~kinzler/align/

Modified by Luis Arocha <lah.data@gmail.com>.

=cut
# }}}
#==============================================================================#
# ENVIRONMENT                                                                  #
#==============================================================================#
# {{{
# Modulos
use Getopt::Std;
$Getopt::Std::STANDARD_HELP_VERSION = 1;

# }}}
# {{{
# Constantes
our $VERSION = substr q$Revision: 3.1 $, 10;
# }}}
# {{{
# Variables
our $opt_a;
our $opt_h;
$usage = "usage: $0 [ -haApcwfnl ] [ file ... ]
    -h  display just this help message
    -A  display all lines
    -p  display processed lines instead of raw lines
    -c  use number of characters instead of printing width
    -w  display line widths
    -f  display filenames
    -n  display line numbers
    -l  display lines
    default is -wfnl of the first longest line\n";
my $Width = -1;

# }}}
# {{{ Parametros
getopts('haApcwfnl') || die $usage;

die $usage if $opt_h;

$opt_w = $opt_f = $opt_n = $opt_l = 1 unless grep($_, ($opt_w, $opt_f, $opt_n, $opt_l));
$process = $opt_p && $opt_l || !($opt_c || $opt_A && !$opt_w);

# }}}
#==============================================================================#
# MAIN                                                                         #
#==============================================================================#
# {{{
# Procesar la entrada est√°ndar
while (<>) {
    s/[\r\n]*$//;
    $line = $_;
    if ($process) {
        s/.*[\f\r]//;
        s/[\000-\007\013\016-\037\177-\237]//g;
        1 while s/[ -~]\010//g;
        s/^\010*//;
        while (($t = index($_, "\t")) >= $[) {
            $s = 8-$t % 8;
            substr($_, $t, 1) = ' ' x $s;
            1 while s/[ -~]\010//g;
            s/^\010*//;
        }
    }
    $width = length(($opt_c) ? $line : $_);
    $line  = $_ if $opt_p;
    if ($opt_A) {
        printline($width, $ARGV, $., $line);
    } elsif ($width > $Width) {
        $Width = $width;
        @files = ($ARGV);
        @lnums = ($.);
        @lines = ($line);
    } elsif ($width == $Width && $opt_a) {
        push(@files, $ARGV);
        push(@lnums, $.);
        push(@lines, $line);
    }

    close ARGV if eof;
}

# Salir si opcion -A
if ($opt_A){
    exit;
}
foreach (@files) {
    printline($Width, $_, shift @lnums, shift @lines);
}
# }}}
#==============================================================================#
# FUNCTIONS                                                                    #
#==============================================================================#
# {{{
sub printline {
    my ($width, $file, $lnum, $line) = @_;
    my @output = ();
    push(@output, $width) if $opt_w;
    push(@output, $file)  if $opt_f;
    push(@output, $lnum)  if $opt_n;
    push(@output, $line)  if $opt_l;
    print join(':', @output), "\n";
}
# }}}
