#!/bin/bash
#==============================================================================#
# POD                                                                          #
#==============================================================================#
# {{{
NUL=<<=cut
=encoding utf-8

=head1 NAME

B<pdf2txt> - Convierte pdf a txt usando ps2ascii

=head1 DESCRIPTION

Convierte pdf a txt usando ps2ascii

=head1 COPYRIGHT & LICENSE

Copyright 2017 el autor.

Todos los derechos reservados.

Puede usar, copiar, modificar, distribuir y vender este software, reconociendo a
su autor original y de acuerdo con los términos de la licencia GPL. (GNU General
Public License).

I<No se dan garantías de ningun tipo. Use este software a su propio riesgo.>

=head1 AUTHOR

Luís M. Arocha Hernández <lah.data@gmail.com>

=cut

# }}}
#==============================================================================#
# FUNCTIONS                                                                    #
#==============================================================================#
# {{{
usage () {

echo >&2 "$NAME_ $VERSION_ - $PURPOSE_
Usage: $SYNOPSIS_
Requires: $REQUIRES_
Options:
     -h, usage and options (help)
     -l, see this script
     -r, remove input file after conversion
     -u, usage and options (help)
     -v, verbose"
exit 1
}
# }}}
#==============================================================================#
# ENVIRONMENT                                                                  #
#==============================================================================#
# {{{
# Variables
NAME_="pdf2txt"
HTML_="convert pdf to text"
PURPOSE_="convert pdf file to ascii text; write the converted file to disk"
SYNOPSIS_="$NAME_ [-vhlr] <file> [file...]"
REQUIRES_="standard GNU commands, ps2ascii"
VERSION_="1.0"
DATE_="2004-04-18; last update: 2005-03-03"
AUTHOR_="Dawid Michalczyk <dm@eonworks.com>"
URL_="www.comp.eonworks.com"
CATEGORY_="text"
PLATFORM_="Linux"
SHELL_="bash"
DISTRIBUTE_="yes"
rmf=
verbose=

# }}}
# {{{
# Parametros
# arg check
[ $# -eq 0 ] && { echo >&2 missing argument, type $NAME_ -h for help; exit 1; }
# option and argument handling
while getopts hlruv options; do
    case $options in
        h) usage ;;
        l) more $0 ;;
        r) rmf=on ;;
        u) usage ;;
        v) verbose=on ;;
       \?) echo invalid or missing argument, type $NAME_ -h for help; exit 1 ;;
    esac

done
shift $(( $OPTIND - 1 ))
# }}}
#==============================================================================#
# MAIN                                                                         #
#==============================================================================#
# {{{
# check if required command is in $PATH variable
which ps2ascii &> /dev/null
[[ $? != 0 ]] && { echo >&2 the required \"ps2ascii\" command is not in your PATH; exit 1; }

# }}}
# {{{
# main
for a in $@; do
    if [ -f ${a%.*}.txt ]; then
        echo ${NAME_}: skipping: ${a%.*}.txt file already exist
        continue
    else
        [[ $verbose ]] && echo "${NAME_}: converting: $a -> ${a%.*}.txt"
        ps2ascii $a > ${a%.*}.txt
        [[ $? == 0 ]] && stat=0 || stat=1
        [[ $stat == 0 ]] && [[ $verbose ]] && [[ $rmf ]] && echo ${NAME_}: removing: $a
        [[ $stat == 0 ]] && [[ $rmf ]] && rm -f -- $a
    fi
done
# }}}
