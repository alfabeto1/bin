#!/usr/bin/perl
#==============================================================================#
# POD                                                                          #
#==============================================================================#
# {{{

=encoding utf-8

=head1 NAME

B<htmlindenter> - Indent html

=head1 SYNOPSIS

=over 4

=item htmlindenter [-h|--help|-u|-V|--version]

=item htmlindenter [-v] [-t] [F<FILE>...]

=back

=head1 DESCRIPTION

Reindenta código html. Se emite siempre por la salida estándar.

=head1 ARGUMENTS

Nombre del fichero a indentar. Si no se indica, se usa entrada estándar.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Muestra la información de ayuda completa.

=item B<-u>

Muestra la información básica de uso (SYNOPSIS).

=item B<-v>

Muestra información detallada durante la ejecución.

=item B<-V>, B<--version>

Muestra la versión del comando y los módulos usados.

=back

=head1 BUGS

No hay fallos conocidos en este script. Por favor informe de cualquier fallo al
autor.

Parches para mejoras o errores, comentarios y sugerencias serán bienvenidos.

=head1 COPYRIGHT & LICENSE

Copyright 2016 el autor.

Todos los derechos reservados.

Puede usar, copiar, modificar, distribuir y vender este software, reconociendo a
su autor original y de acuerdo con los términos de la licencia GPL. (GNU General
Public License).

I<No se dan garantías de ningun tipo. Use este software a su propio riesgo.>

=head1 AUTHOR

Luís M. Arocha Hernández <lah.data@gmail.com>

=cut

# }}}
#==============================================================================#
# ENVIRONMENT                                                                  #
#==============================================================================#
# {{{ Modulos y pragmas
use strict;
use CommonFunc qw/:all/;
use Getopt::Std;

# }}}
# {{{ Constantes (o casi)
our $VERSION = substr q$Revision: 3.1 $, 10;

# }}}
# {{{ Variables
my %opt;
my $textarea=0;
my $level =0;
my $pre   =0;
my $script=0;
my @words =qw/
    article             big                 body                center
    div                 dl                  dt                  em
    fieldset            form                h1                  h2
    h3                  head                header              label
    legend              li                  option              section
    select              small               span                strong
    table               tbody               td                  th
    thead               title               tmpl_if             tmpl_loop
    tmpl_unless         tr                  ul
/;

# }}}
# {{{ Parametros
getopts('huvV',\%opt) or usage('Fallo parámetros');
help()              if $opt{h};
usage()             if $opt{u};
if ($opt{V}){version();exit 1;}

# }}}
#==============================================================================#
# MAIN                                                                         #
#==============================================================================#
# {{{
while (<>){
    my $printed=0;

    #----------------------------------------------------------
    if (/\<pre[ >].*\<\/pre\>/i){
        printf("%s%s","  "x$level, ltrim($_));
        next;
    }
    if (/<pre[ >]/i)  { print; $pre=1; next; }
    if (/<\/pre\>/i){ print; $pre=0; next; }
    if ($pre)       { print; next; }

    #----------------------------------------------------------
    if (/<script.*\/script\>/i){
        printf("%s%s","  "x$level, ltrim($_));
        next;
    }
    if (/<script/i)    { print; $script=1; next; }
    if (/<\/script\>/i){ print; $script=0; next; }
    if ($script)       { print; next; }

    #----------------------------------------------------------
    if (/<textarea.*\/textarea\>/i){
        printf("%s%s","  "x$level, ltrim($_));
        next;
    }
    if (/<textarea/i)    { print; $textarea=1; next; }
    if (/<\/textarea\>/i){ print; $textarea=0; next; }
    if ($textarea)       { print; next; }

    #----------------------------------------------------------
    if (/<TMPL_ELSE/){
        printf("%s%s","  "x($level-1), ltrim($_));
        next;
    }

    #----------------------------------------------------------
    if (/\<TMPL_IF.*<\/TMPL_IF/i){
        printf("%s%s","  "x$level, ltrim($_));
        next;
    }
    #----------------------------------------------------------
    foreach my $w(@words) {
        if (/<$w[ \>]/i){
            printf("%s%s","  "x$level, ltrim($_)) unless $printed++;
            $level++;
            print "Incremented $w -->$level\n" if $opt{v};
        }
        if (/<\/$w[ \>]/i){
            $level-- if $level;
            printf("%s%s","  "x$level, ltrim($_)) unless $printed++;
            print "Decremented $w -->$level\n" if $opt{v};
        }
    }
    printf("%s%s","  "x$level, ltrim($_)) unless $printed++;
}
exit 0;

# }}}
#==============================================================================#
# FUNCTIONS                                                                    #
#==============================================================================#
# {{{
sub ltrim {
    my $t=shift;
    $t=~ s/^\s+//;
    return $t;
}

# }}}
