#!/usr/bin/perl
#==============================================================================#
# POD                                                                          #
#==============================================================================#
# {{{
=encoding utf-8

=head1 NAME

B<vimcustom> - Shows inline doc from vimrc file

=head1 SYNOPSIS

=over 4

=item vimcustom [-h|--help|-u|-V|--version]

=item vimcustom [-v] [F<FILE>...]

=back

=head1 DESCRIPTION

Extrae, formatea y muestra por la salida estándar la documentación que se ha
incluido en los ficheros de entrada.

Los ficheros de entrada deben tener lineas conteniendo documentación, con el
formato:

    " DOC: texto cabecera
    " DOC: teclas --> acción
    " DOC: ______texto

Estas líneas son las que se extraen. Se suprimen las marcas de folding, los
espacios extras y  comillas dobles.

Indentación de texto: los B<_> iniciales se convierten en espacios.

=head1 ARGUMENTS

Se toman como argumentos cero o varios ficheros de entrada.

Si no se indica ninguno se toma la configuración de vim por defecto
F<~/etc/vim/vimrc>.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Help. Muestra la información de ayuda completa.

=item B<-u>

Usage. Muestra la información básica de uso (SYNOPSIS).

=item B<-v>

Verbose. Muestra información detallada durante la ejecución.

=item B<-V>, B<--version>

Version. Muestra la versión del comando y los módulos usados.

=back

=head1 BUGS

No hay fallos conocidos en este script. Por favor informe de cualquier fallo al
autor.

Parches para mejoras o errores, comentarios y sugerencias serán bienvenidos.

=head1 COPYRIGHT & LICENSE

Copyright 2017 el autor.

Todos los derechos reservados.

Puede usar, copiar, modificar, distribuir y vender este software, reconociendo a
su autor original y de acuerdo con los términos de la licencia GPL. (GNU General
Public License).

I<No se dan garantías de ningun tipo. Use este software a su propio riesgo.>

=head1 AUTHOR

Luís M. Arocha Hernández <lah.data@gmail.com>

=cut
# }}}
#==============================================================================#
# ENVIRONMENT                                                                  #
#==============================================================================#
# {{{ Modulos y pragmas
use strict;
use CommonFunc qw/:all/;
use Getopt::Std;

# }}}
# {{{ Constantes (o casi)
my $HOME=$ENV{HOME};
our $VERSION = substr q$Revision: 3.1 $, 10;

# }}}
# {{{ Variables
my %opt;

# }}}
# {{{ Parametros
getopts('huvV',\%opt) or usage('Fallo parámetros');
help()              if $opt{h};
usage()             if $opt{u};
if ($opt{V}){version();exit 1;}
unshift @ARGV,"$HOME/etc/vim/vimrc" unless @ARGV;

# }}}
#==============================================================================#
# MAIN                                                                         #
#==============================================================================#
# {{{
# Procesa fichero(s) de entrada
while (<>){
    next unless /DOC:/ or /^"-+$/;
    s/DOC://;
    s/^"-+$//g;
    s/^ *"//g;
    s/"? ?\{\{\{//g;
    s/"? ?\}\}\}//g;
    s/^ +//g;
    s/ +$//g;
    if (/(.*) +--> +(.*)/){
        $_ = pad($1).' '.$2."\n";
    }
    # Wizardry. Substitute initial hyphens by the same length of spaces.
    s/^(_+)/" "x length($1)/e;
    if (/[a-z]/){
        print '  ';
    } elsif (/[A-Z]/) {
        print "\n";
    }
    print;
}
# }}}
exit 0;
#==============================================================================#
# FUNCTIONS                                                                    #
#==============================================================================#
# {{{
sub pad {
    my $t   = shift;
    my $t1  = $t;
    my $pad = '';
    $t1     =~ s/º/./;
    $t1     =~ s/¡/./;
    $t1     =~ s/ñ/./;
    $t1     =~ s/ç/./;
    $pad .= ' ' while (length($t1 . $pad)<14);
    return $t . $pad;
}
# }}}
