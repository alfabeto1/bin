#!/bin/sh
#==============================================================================#
# POD                                                                          #
#==============================================================================#
# {{{
NUL=<<=cut

=head1 NAME

cpfound - recursively find files and copy to a specified dir

=head1 DESCRIPTION

Requires standard GNU commands

=head1 SYNOPSIS

cpfound [-vhl] [-i <input_dir>] -o <output_dir> -p "<pattern>" -s +|-<n>

=head1 OPTIONS

     -h, usage and options (this help)
     -l, see this script
     -i, <input_dir>, path to where to look for files. Only needed if current
         dir is not used as input dir.
     -o, <output_dir>, path to where to copy the found files. In case files with
         same filenames are found, all copied files have a "_<n>" appended
         incrementally to the prefix where n starts at 1.
     -p, "<pattern>", search file pattern as accepted by finds -name option; no
         case distinction is made.
     -s, +|-<n>, file size in bytes; +n for greater then n; -n for less then n;
         n for exactly n.
     -u, usage and options (this help)
     -v, verbose

=head1 COPYRIGHT & LICENSE

This program is distributed under the terms of the GNU General Public License

=head1 AUTHOR

Dawid Michalczyk <dm@eonworks.com>

www.comp.eonworks.com

=cut

# }}}
#==============================================================================#
# FUNCTIONS                                                                    #
#==============================================================================#
# {{{
function usage {
    if test "$*"; then
        echo $*
    fi
    pod2usage -verbose 1 $0
    exit 1
}
# }}}
# {{{
function help {
    pod2text -c $0
    exit 1
}
# }}}
# {{{
rename_file() {
# usage: fnc <prefix> <suffix>

    # keep on checking if file exist; if so, append integer to prefix and check again
    # Although checking one file at a time starting from 1 may seem like a slow
    # solution, it's only slow in situations when dealing with huge amounts of
    # files with same file names.

    if [ -f "${odir}"/"${prefix}"_${c}."${suffix}" ] ;then

        ((c++))
        rename_file "${prefix}" "${suffix}"

    # file does not exist; return a valid file name
    else
        echo "${prefix}"_${c}."${suffix}"
        c=1
    fi

}
# }}}
# {{{
find_and_cp() {

    find . -type f -iname "${file_pattern}" -size ${file_size}c | while read a; do

        file="${a##*/}"
        prefix="${file%%.*}"
        suffix="${file#*.}"

        file_name=$(rename_file "${prefix}" "${suffix}")
        [[ $verbose ]] && echo cpfound: copying "$a -> ${odir}/${file_name}"
        cp -- "$a" "${odir}"/"${file_name}"

    done

}
# }}}
#==============================================================================#
# ENVIRONMENT                                                                  #
#==============================================================================#
# {{{
# Variables
file_size=
input_dir=
output_dir=
file_pattern=
verbose=
c=1
# }}}
# {{{
# Parametros
[ $# -eq 0 ] && usage "missing argument"

trap "exit 1" 1 2 3 15
while getopts hi:lo:p:s:uv options; do

    case "$options" in
        h) help ;;
        i) input_dir="$OPTARG" ;;
        l) more $0; exit 1 ;;
        o) output_dir="$OPTARG" ;;
        p) file_pattern="$OPTARG" ;;
        s) file_size="$OPTARG" ;;
        u) usage ;;
        v) verbose=on ;;
        \?) usage "invalid argument" ;;

    esac

done
shift $(( $OPTIND - 1 ))

# args check
[[ $file_pattern ]] || { echo >&2 missing file pattern argument; exit 1; }
[[ $file_size ]] || { echo >&2 missing file size argument; exit 1; }
[[ -d "$output_dir" ]] || { echo >&2 output dir "$output_dir" does not exist; exit 1; }
# }}}
#==============================================================================#
# MAIN                                                                         #
#==============================================================================#
# {{{
# main
odir=($(cd "$output_dir"; pwd;)) # relative and full path support
if [ $input_dir ];then
    # relative and full path support
    idir=($(cd "$input_dir"; pwd;))
    [ -d "$idir" ] || { echo >&2 input dir "$idir" does not exist; exit 1; }
    cd -- "$idir" || { echo >&2 can not cd to "$idir"; exit 1; }
    find_and_cp
else
    find_and_cp
fi
# }}}
