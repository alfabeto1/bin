#!/usr/bin/perl
#==============================================================================#
# POD                                                                          #
#==============================================================================#
# {{{
=encoding utf-8

=head1 NAME

B<codebits> - Muestra trozos de código para insertar durante la edición

=head1 SYNOPSIS

=over 4

=item codebits [-h|--help|-u|-V|--version]

=item codebits [-f] [-q|-l] [-v] [NUM ...]

=back

=head1 DESCRIPTION

Saca trozos de codigo para insertar durante la edición

El objetivo de este programa es se utilizado dentro de F<vim> para
insertar varias líneas, que sean habituales, en el programa que se está
editando.

Se crearán, inicialmente, codebits para F<HTML>, F<Perl>, F<Shell> y
F<Markdown>.

Otros codebits, de menor uso, o sin testear no saldrán en el menú, salvo
que se solicite como opción. Tendrán como código, no un número, sino
letras.

=head1 ARGUMENTS

Se puede indicar un numero de codebit para seleccionarlo directamente.

En caso contrario (o si se usa opción -l)  se muestra la relación de los
codebits disponibles.

=head1 OPTIONS

=over 4

=item B<-f> 

FULL. Muestra la lista completa de codebits.

=item B<-h>, B<--help>

Muestra la información de ayuda completa.

=item B<-l> 

Sale después de motrarla lista de codebits disponible.

=item B<-q> 

No se muestra la lista de codebits.

=item B<-u> 

Muestra la información básica de uso (SYNOPSIS).

=item B<-v> 

Muestra información detallada durante la ejecución.

=item B<-V>, B<--version>

Muestra la versión del comando y los módulos usados.

=back

=head1 FILES

El fichero que contiene los trozos de código es
F<$HOME/Dropbox/NOTAS/MIX/codebits.txt>.

=head1 DEPENDENCIES

Se usa el comando F<column> 

para mostrar la lista de codebits
disponibles tabulada para reducir el espacio necesario.

Si este comando no está instalado, se muestra una lista simple, que
ocupa más espacio.

=head1 BUGS

No hay fallos conocidos en este script. Por favor informe de cualquier
fallo al autor.

Parches para mejoras o errores, comentarios y sugerencias serán
bienvenidos.

=head1 COPYRIGHT & LICENSE

Copyright 2015 el autor.

Todos los derechos reservados.

Puede usar, copiar, modificar, distribuir y vender este software, reconociendo a
su autor original y de acuerdo con los términos de la licencia GPL. (GNU General
Public License).

I<No se dan garantías de ningun tipo. Use este software a su propio riesgo.>

=head1 AUTHOR

Luís M. Arocha Hernández <lah.data@gmail.com>

=cut

# }}}
#==============================================================================#
# ENVIRONMENT                                                                  #
#==============================================================================#
# {{{ Modulos y pragmas
use strict;
use CommonFunc qw/:all/;
use Getopt::Std;

# }}}
# {{{ Constantes (o casi)
my $HOME=$ENV{HOME};
our $VERSION = substr q$Revision: 3.2 $, 10;
my $FILE="$HOME/etc/codebits.txt";

# }}}
# {{{ Variables
my %opt;
my %codebit;
my %title;
my $current;
my $line;
my $year   = 1900 + (localtime)[5];
my $author = 'Luís M. Arocha Hernández';
my $email  = 'lah.data@gmail.com';
my $date   = aaaammdd('','-');
# }}}
# {{{ Parametros
getopts('fhlquvV',\%opt) or usage('Fallo parámetros');
help()              if $opt{h};
usage()             if $opt{u};
if ($opt{V}){version();exit 1;}
$opt{f} |= 0;

# }}}
#==============================================================================#
# MAIN                                                                         #
#==============================================================================#
# {{{ Importamos los codebits de DATA
# La cabecera se identifica con cuatro llaves abiertas     |
# el fin, con cuatro llaves cerradas                       |
#----------------------------------------------------------+
open BITS, $FILE or die $!;
while ($line = <BITS>){
    if ($line =~ /^\}\}\}\}/){
        $current='';
        next;
    }
    if ($line =~ s/^\{\{\{\{ *//){
        chomp $line;
        if ($current){
            $codebit{$current}=~ s/\n+$/\n/;
        }
        $line        =~ s/ *-*$//;
        $line        =~ /^(\S+) +(.+)$/;
        $current     = uc($1);
        $title{$1}   = $2;
        $codebit{$current} = '' if $current;
        next;
    }
    if ($current){
        $codebit{$current} .= $line;
    }
}
close BITS;

# }}}
# {{{ Si no tenemos numero de codebit por parametro: MENU
if (!@ARGV){
    if (!$opt{q} or $opt{l}){
        do_list($opt{f});
    }
    exit if $opt{l};
    my $sel = <>;
    chomp $sel;
    unshift @ARGV, split / +/,$sel;
}

# }}}
# {{{ Lo mostramos
while (@ARGV){
    my $sel = shift;
    $sel =~ s/\.txt$//gi;
    $sel =~ s/.*\.//gi;
    $sel =~ s/[^\d\w ]//g;
    $sel = uc($sel); # por el momento.

    if (!$codebit{$sel}){
        $sel =~ s/^.*\.//;
    }
    if ($codebit{$sel}){
        $codebit{$sel} =~ s/%YEAR%/$year/g;
        $codebit{$sel} =~ s/%DATE%/$date/g;
        $codebit{$sel} =~ s/%AUTHOR%/$author/g;
        $codebit{$sel} =~ s/%EMAIL%/$email/g;
        print $codebit{$sel};
    }
}

exit 0;

# }}}
#==============================================================================#
# FUNCTIONS                                                                    #
#==============================================================================#
# {{{
sub aaaammdd {
    # Gives time in such format
    my $t   = shift;
    my $sep = shift || '';
    $t      = ''   unless defined $t;
    $t      = time unless length($t);
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
        localtime($t);
    return sprintf "%04d%s%02d%s%02d", $year+1900, $sep, $mon+1, $sep, $mday;
}
# }}}
# {{{
sub do_list { 
    # list codes and titles of available codebits.
    my $full=shift||0;
    my @keys = sort {$a <=> $b} keys %title;
    if (open COL, "|column"){
        select COL;
    }
    foreach my $k(sort {$a cmp $b} keys %title){
        if (!$full){
            # Ocultamos lo que tenga una letra al final
            next if $k =~ /[A-Z]$/i;
        }
        if ($k=~ /^\d/){
            printf "%02s %s\n",$k, $title{$k};
        } else {
            printf "%-5s %s\n",$k, $title{$k};
        }
    }
    close COL;
    select *STDOUT;
}

# }}}
