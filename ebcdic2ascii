#!/usr/bin/perl
#==============================================================================#
# POD                                                                          #
#==============================================================================#
# {{{
=encoding utf-8

=head1 NAME

B<ebcdic2ascii> - Convierte de EBCDIC a ASCII.

=head1 SYNOPSIS

=over 4

=item ebcdic2ascii [-h|--help|-u|-V|--version]

=item ebcdic2ascii [-r] [-v] [FILE]

=back

=head1 DESCRIPTION

Convierte de EBCDIC a ASCII. No convierte caracteres especiales.
Si no se indica fichero a tratar se usa la entrada estándar. En todos
los casos se usa la salida estándar.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Muestra la información de ayuda completa.

=item B<-r>

Reverse. De ASCII a EBCDIC.

=item B<-u>

Muestra la información básica de uso (SYNOPSIS).

=item B<-v>

Muestra información detallada durante la ejecución.

=item B<-V>, B<--version>

Muestra la versión del comando y los módulos usados.

=back

=head1 BUGS

No hay fallos conocidos en este script. Por favor informe de cualquier
fallo al autor.

Parches para mejoras o errores, comentarios y sugerencias serán
bienvenidos.

=head1 FUNCTIONS

=over 4

=item ascii2ebcdic()

takes as the first argument a ASCII string that is to be
converted to EBCDIC using default conversion table.

=item ebcdic2ascii()

takes as the first argument a EBCDIC string that is to be
converted to ASCII using default conversion table.

=back

=head1 NOTES

La tabla de conversion esta en octal desde el caracter 000 al 377
(255 en decimal).

    EBCDIC              ASCII
 El 000 se convierte en 040, o sea, 32 decimal, o sea <SPACE>.
 El 001              en 001, o sea, se queda como esta. Etc.

Extraido del paquete EBCDIC.pm. La tabla original se ha tocado un poco.

=head1 BUGS

No hay fallos conocidos en este script. Por favor informe de cualquier
fallo al autor.

Parches para mejoras o errores, comentarios y sugerencias serán
bienvenidos.

=head1 COPYRIGHT & LICENSE

Copyright 2012 el autor.

Todos los derechos reservados.

Puede usar, copiar, modificar, distribuir y vender este software, reconociendo
a su autor original y de acuerdo con los términos de la licencia GPL. (GNU
General Public License).

I<No se dan garantías de ningun tipo. Use este software a su propio riesgo.>

=head1 AUTHOR

Luís M. Arocha Hernández <lah.data@gmail.com>

=cut

# }}}
#==============================================================================#
# ENVIRONMENT                                                                  #
#==============================================================================#
# {{{ Modulos y pragmas
use strict;
use CommonFunc qw/:all/;
use Getopt::Std;

# }}}
# {{{ Constantes (o casi)
our $VERSION = substr q$Revision: 3.1 $, 10;

# }}}
# {{{ Variables
my $default =
#    TABLA DE CONVERSION (MIA)         o : d     TABLA DE CONVERSION ORIGINAL
' 040 001 002 003 004 005 006 007'. # 000:  0 ' 000 001 002 003 234 011 206 177'
' 010 011 012 013 014 015 016 017'. # 010:  8 ' 227 215 216 013 014 015 016 017'
' 020 021 022 023 024 025 026 027'. # 020: 16 ' 020 021 022 023 235 205 010 207'
' 030 031 032 033 034 035 036 037'. # 030: 24 ' 030 031 222 217 034 035 036 037'
' 040 041 042 043 044 045 046 047'. # 040: 32 ' 200 201 202 203 204 012 027 033'
' 050 051 052 053 054 055 056 057'. # 050: 40 ' 210 211 212 213 214 005 006 007'
' 060 061 062 063 064 065 066 067'. # 060: 48 ' 220 221 026 223 224 225 226 004'
' 070 071 072 073 074 075 076 077'. # 070: 56 ' 230 231 232 233 024 025 236 032'
' 040 101 102 103 104 105 106 107'. # 100: 64 ' 040 240 342 344 340 341 343 345'
' 110 111 242 056 074 050 053 174'. # 110: 72 ' 347 361 242 056 074 050 053 174'
' 046 121 122 123 124 125 126 127'. # 120: 80 ' 046 351 352 353 350 355 356 357'
' 130 131 041 044 052 051 073 254'. # 130: 88 ' 354 337 041 044 052 051 073 254'
' 055 057 142 143 144 145 146 147'. # 140: 96 ' 055 057 302 304 300 301 303 305'
' 150 151 152 054 045 137 076 077'. # 150:104 ' 307 321 246 054 045 137 076 077'
' 160 161 162 163 164 165 166 167'. # 160:112 ' 370 311 312 313 310 315 316 317'
' 170 171 072 043 100 047 075 042'. # 170:120 ' 314 140 072 043 100 047 075 042'
' 200 141 142 143 144 145 146 147'. # 200:128 ' 330 141 142 143 144 145 146 147'
' 150 151 212 213 214 215 216 217'. # 210:136 ' 150 151 253 273 360 375 376 261'
' 220 152 153 154 155 156 157 160'. # 220:144 ' 260 152 153 154 155 156 157 160'
' 161 162 232 233 234 235 236 237'. # 230:152 ' 161 162 252 272 346 270 306 244'
' 240 241 163 164 165 166 167 170'. # 240:160 ' 265 176 163 164 165 166 167 170'
' 171 172 252 253 254 255 256 257'. # 250:168 ' 171 172 241 277 320 335 336 256'
' 260 261 262 263 264 265 266 267'. # 260:176 ' 136 243 245 267 251 247 266 274'
' 270 276 272 273 274 275 276 277'. # 270:184 ' 275 276 133 135 257 250 264 327'
' 300 101 102 103 104 105 106 107'. # 300:192 ' 173 101 102 103 104 105 106 107'
' 110 111 312 313 314 315 316 317'. # 310:200 ' 110 111 255 364 366 362 363 365'
' 320 112 113 114 115 116 117 120'. # 320:208 ' 175 112 113 114 115 116 117 120'
' 121 122 332 333 334 335 336 337'. # 330:216 ' 121 122 271 373 374 371 372 377'
' 340 341 123 124 125 126 127 130'. # 340:224 ' 134 367 123 124 125 126 127 130'
' 131 132 352 353 354 355 356 357'. # 350:232 ' 131 132 262 324 326 322 323 325'
' 060 061 062 063 064 065 066 067'. # 360:240 ' 060 061 062 063 064 065 066 067'
' 070 071 372 373 374 375 376 377'; # 370:248 ' 070 071 263 333 334 331 332 237'

$default=~ s/ /\\/g;
my %opt;

# }}}
# {{{ Parametros
getopts( 'hruvV', \%opt ) or usage('Fallo parámetros');
help()    if $opt{h};
usage()   if $opt{u};
if ($opt{V}){version();exit 1;}

# }}}
#==============================================================================#
# MAIN                                                                         #
#==============================================================================#
# {{{
while(<>){
    if ($opt{r}){
        print ascii2ebcdic($_);
    } else {
        print ebcdic2ascii($_);
    }
}

exit 0;

# }}}
#==============================================================================#
# FUNCTIONS                                                                    #
#==============================================================================#
# {{{
sub ebcdic2ascii {
    my $e = shift;
    eval '$e =~ tr/\000-\377/' . $default . '/';
    return $e;
}

# }}}
# {{{
sub ascii2ebcdic {
    my $a = shift;
    eval '$a =~ tr/' . $default . '/\000-\377/';
    return $a;
}

# }}}
