#!/usr/bin/perl
#==============================================================================#
# POD                                                                          #
#==============================================================================#
# {{{
=encoding utf-8

=head1 NAME

B<numera> - Cambia los nombres de fichero poniendo numeros

=head1 SYNOPSIS

=over 4

=item numera [-h|--help|-u|-V|--version]

=item numera [-p XXX] [-d NUM] [-f|-s] [-t] [-k] [F<FILE...>]

=back

=head1 DESCRIPTION

Cambia los nombres de fichero poniendo numeros

=head1 OPTIONS

=over 4

=item B<-d NUM> (integer)

Numero de digitos que deberán tener los nombres resultantes. Debe ser un
numero del 1 al 9.

El valor por defecto da nombres como 00001.jpg, 00002.jpg, 00003.jpg,
etcétera.

DEFAULT: 5

=item B<-f>

Ordena los ficheros por fecha de modificación, antes de
renombrarlos.

=item B<-h>, B<--help>

Muestra la información de ayuda completa.

=item B<-k>

Keep. Mantiene también el nombre antiguo.

=item B<-t>

Test mode. No ejecuta, solo muestra lo que se haría.

=item B<-p PREFIX> (string)

Prefijo que se debe poner a los nuevos nombres, además del número.

=item B<-s>

Ordena los ficheros por tamaño, antes de renombrarlos.

=item B<-u>

Muestra la información básica de uso (SYNOPSIS).

=item B<-v>

Muestra información detallada durante la ejecución.

=item B<-V>, B<--version>

Muestra la versión del comando y los módulos usados.

=back

=head1 BUGS

No hay fallos conocidos en este script. Por favor informe de cualquier
fallo al autor.

Parches para mejoras o errores, comentarios y sugerencias serán
bienvenidos.

=head1 COPYRIGHT & LICENSE

Copyright 2012 el autor.

Todos los derechos reservados.

Puede usar, copiar, modificar, distribuir y vender este software, reconociendo
a su autor original y de acuerdo con los términos de la licencia GPL. (GNU
General Public License).

I<No se dan garantías de ningun tipo. Use este software a su propio riesgo.>

=head1 AUTHOR

Luís M. Arocha Hernández <lah.data@gmail.com>

=cut

# }}}
#==============================================================================#
# ENVIRONMENT                                                                  #
#==============================================================================#
# {{{ Pragmas y modulos
$|++;
use 5.10.0;
use strict;
use CommonFunc qw/:all/;
use Getopt::Std;

# }}}
# {{{ Constantes (o casi)
our $VERSION = substr q$Revision: 3.2 $, 10;

# }}}
# {{{ Variables
my $name   = '';
my $n      = 1;
my $ext    = '';
my $digits = 5;
my @files;
my %opt;

# }}}
# {{{ Parametros
getopts('d:fhktp:suV',\%opt) or usage('Fallo parámetros');
help()    if $opt{h};
usage()   if $opt{u};
if ($opt{V}){version();exit 1;}
usage('-f y -s son incompatibles') if ($opt{f} and $opt{s});
if ($opt{d}){
    usage('-d debe ser un numero del 1 al 9') unless $opt{d} =~ /^[1-9]$/;
    $digits = $opt{d};
}
usage('Es obligatorio indicar al menos un fichero para renombrar')
    unless @ARGV;
if ($opt{p}){
    $opt{p} .= '-' unless $opt{p} =~ /-$/;
} else {
    $opt{p} ='';
}

# }}}
# {{{
# Chequeo previo
if (-e ".nonames") {
    print ".nonames file found. Aborting.\n";
    exit 0;
}

# }}}
#==============================================================================#
# MAIN                                                                         #
#==============================================================================#
# {{{
if ($opt{f}) {
    @files = sort { por_fecha( $a, $b ) } @ARGV;
} elsif ($opt{s}) {
    @files = sort { por_size( $a, $b ) } @ARGV;
} else {
    @files = sort @ARGV;
}
foreach (@files) {
    next unless -f "$_";
    if (/\./) {
        $ext = $_;
        $ext =~ s/.*\././;
        $ext = lc($ext);
    } else {
        $ext = '';
    }
    my $f = $_;
    $f =~ s/$ext$//;
    next if /^$opt{p}\d\d\d\d\d(-.*)?$ext/;
    while (1) {
        my $name1 = sprintf( "%s%0${digits}d", $opt{p}, $n );
        $name     = $name1 . ( $opt{k} ? "-$f" : '' ) . $ext;
        $n++;
        last unless existe( $name1, $ext );
    }
    print "$_ --> $name\n";
    rename "$_", $name unless $opt{t};
}
exit 0;

# }}}
#==============================================================================#
# FUNCTIONS                                                                    #
#==============================================================================#
# {{{
sub existe {
    my $nam = shift;
    my $ext = shift;
    my @f   = glob("$nam*$ext");
    if (@f) {
        # print "EXISTE @f\n";
        print ".";
        return 1;
    } else {
        print "\n";
        return 0;
    }
}

# }}}
# {{{
sub por_fecha {
    my $f1 = shift;
    my $f2 = shift;
    my @s1 = stat($f1);
    my @s2 = stat($f2);
    return $s1[9] <=> $s2[9];
}

# }}}
# {{{
sub por_size {
    my $f1 = shift;
    my $f2 = shift;
    my @s1 = stat($f1);
    my @s2 = stat($f2);
    return $s1[7] <=> $s2[7];
}

# }}}
