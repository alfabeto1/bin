#!/usr/bin/perl
#==============================================================================#
# POD                                                                          #
#==============================================================================#
# {{{
=encoding utf-8

=head1 NAME

B<z> - Extract utility for archive files

=head1 SYNOPSIS

=over 4

=item B<z> [-d|-h|--help|-u|-V|--version]

=item B<z> [-v] [-t] [-l] FILE...

=back

=head1 DESCRIPTION

Extract utility for archive files.

Valid compressed types:

=over 4

=item * Tar and variants: tar tar.bz2 tar.gz tar.xz tbz2 tgz txz

=item * Usual compression formats: 7z arj bz2 gz lzh lzma rar xz z zip

=item * Linux packages: rpm deb

=item * Disk images: dmg iso udf

=item * Windows files: msi exe chm wim xar cab

=item * Google Earth files: kmz

=back

=head1 OPTIONS

=over 4

=item B<-d> Diagnostics. Muestra informacion de diagnostico.

=item B<-h>, B<--help> Muestra la información de ayuda completa.

=item B<-l> List. Lista el contenido, no descomprime.

=item B<-u> Usage. Muestra la información básica de uso (SYNOPSIS).

=item B<-v> Verbose. Muestra información detallada durante la ejecución.

=item B<-V>, B<--version> Muestra la versión del comando.

=item B<-t> Try. No ejecuta. 

=back

=head1 NOTES

7z formats:

    7z       a        apm      ar       arj      bz2      bzip2    cab      chi
    chm      chq      chw      cpio     cramfs   deb      dmg      doc      esd
    ext      ext2     ext3     ext4     fat      gz       gzip     hfs      hfsx
    hxi      hxq      hxr      hxs      hxw      ihex     img      iso      lha
    lib      lit      lzh      lzma     mbr      msi      mslz     msp      mub
    nsis     ntfs     pkg      ppmd     ppt      qcow     qcow2    qcow2c   r00
    rar      rpm      scap     squashfs swm      tar      taz      tbz      tbz2
    tgz      txz      udf      uefif    vdi      vhd      vmdk     wim      xar
    xls      xz       z

=head1 BUGS

No puede procesar ficheros con espacios en el nombre. Pendiente mejorar.

Parches para mejoras o errores, comentarios y sugerencias serán bienvenidos.

=head1 COPYRIGHT & LICENSE

Copyright 2017 el autor.

Todos los derechos reservados.

Puede usar, copiar, modificar, distribuir y vender este software, reconociendo a
su autor original y de acuerdo con los términos de la licencia GPL. (GNU General
Public License).

I<No se dan garantías de ningun tipo. Use este software a su propio riesgo.>

=head1 AUTHOR

Luís M. Arocha Hernández <lah.data@gmail.com>.

=cut

# }}}
#==============================================================================#
# ENVIRONMENT                                                                  #
#==============================================================================#
# {{{ Modulos y pragmas
use 5.10.0;
use strict;
use Getopt::Long qw/:config no_ignore_case bundling/;
use CommonFunc qw/:all/;

# }}}
# {{{ Constantes (o casi)
our $VERSION = substr q$Revision: 3.1 $, 10;

# }}}
# {{{ Variables
my %opt;
my $z7=1;
$z7 = found_program('7z');

# }}}
# {{{ Parametros
Getopt::Long::Configure("bundling","no_ignore_case");
GetOptions (
            "d|diag"     => \$opt{d},
            "h|help"     => \$opt{h},
            "l|list"     => \$opt{l},
            "u|usage"    => \$opt{u},
            "v|verbose"  => \$opt{v},
            "V|version"  => \$opt{V},
            "t|test"     => \$opt{t},
            ) or usage('Fallo parámetros');
help()    if $opt{h};
usage()   if $opt{u};
version() if $opt{V};
if ($opt{d}){
    for my $p (sort qw/
        7z         unace      ar         arj        bunzip2    cabextract
        cpio       dpkg       gunzip     isoinfo    lha        lzh
        rpm        rpm2cpio   uncompress unlzma     unrar      unxz
        unzip
        /){
        found_program($p,1)
    }
    exit 1;
}
usage("Falta fichero a procesar\n") unless @ARGV;

# }}}
#==============================================================================#
# MAIN                                                                         #
#==============================================================================#
# {{{
foreach my $n(@ARGV){
    my $ext='';
    my $cmd='';
    printf "Descomprimiendo $n\n" if $opt{v};
    usage("Fichero no existente. $n") unless -e $n;
    usage("No es un fichero valido para procesar. $n\n") unless -f $n;
    unless ( $n=~ /(.*)\.(tar\.?[^\.]{1,4}$)/ or
             $n=~ /(.*)\.([^\.]{1,4}$)/ ) {
        usage("Extensión no reconocida. $n\n");
    }
    $ext  = lc($2);
    if      ($ext eq 'tar.bz2'){ $cmd = tar  ($n);
    } elsif ($ext eq '7z'     ){ $cmd = z7   ($n);
    } elsif ($ext eq 'a'      ){ $cmd = z7   ($n);
    } elsif ($ext eq 'ace'    ){ $cmd = ace  ($n);
    } elsif ($ext eq 'apm'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'arj'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'bz2'    ){ $cmd = bzip2($n);
    } elsif ($ext eq 'bzip2'  ){ $cmd = bzip2($n);
    } elsif ($ext eq 'cab'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'chm'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'cpio'   ){ $cmd = cpio ($n);
    } elsif ($ext eq 'deb'    ){ $cmd = dpkg ($n);
    } elsif ($ext eq 'dmg'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'exe'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'gz'     ){ $cmd = gzip ($n);
    } elsif ($ext eq 'iso'    ){ $cmd = iso  ($n);
    } elsif ($ext eq 'jar'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'kmz'    ){ $cmd = kmz  ($n);
    } elsif ($ext eq 'lzh'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'lzma'   ){ $cmd = lzma ($n);
    } elsif ($ext eq 'msi'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'ntfs'   ){ $cmd = z7   ($n);
    } elsif ($ext eq 'r01'    ){ $cmd = rar  ($n);
    } elsif ($ext eq 'rar'    ){ $cmd = rar  ($n);
    } elsif ($ext eq 'rpm'    ){ $cmd = rpm  ($n);
    } elsif ($ext eq 'tar'    ){ $cmd = tar  ($n);
    } elsif ($ext eq 'tar.gz' ){ $cmd = tar  ($n);
    } elsif ($ext eq 'tar.xz' ){ $cmd = tar  ($n);
    } elsif ($ext eq 'tar.z'  ){ $cmd = tar  ($n);
    } elsif ($ext eq 'tbz'    ){ $cmd = tar  ($n);
    } elsif ($ext eq 'tbz2'   ){ $cmd = tar  ($n);
    } elsif ($ext eq 'tgz'    ){ $cmd = tar  ($n);
    } elsif ($ext eq 'txz'    ){ $cmd = tar  ($n);
    } elsif ($ext eq 'udf'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'vdi'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'vhd'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'vmdk'   ){ $cmd = z7   ($n);
    } elsif ($ext eq 'wim'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'xar'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'xls'    ){ $cmd = z7   ($n);
    } elsif ($ext eq 'xlsx'   ){ $cmd = z7   ($n);
    } elsif ($ext eq 'xz'     ){ $cmd = xz   ($n);
    } elsif ($ext eq 'z'      ){ $cmd = z    ($n);
    } elsif ($ext eq 'zip'    ){ $cmd = zip  ($n);
    } else  {
        usage("Extensión no reconocida. $n\n");
    }
    print "$cmd\n" if ($opt{v} or $opt{t});
    system $cmd unless $opt{t};
}
exit 0;
# }}}
#==============================================================================#
# FUNCTIONS                                                                    #
#==============================================================================#
# {{{
sub found_program {
    my $program = shift;
    my $verbose=shift;
    printf ("%-10s ", $program) if $verbose;
    system ("which $program 2>/dev/null >/dev/null");
    if ($?){
        say "NOT found" if $verbose;
        return 0
    } else {
        say "ok" if $verbose;
        return 1;
    }
}
# }}}
# {{{
sub ace {
    my $file = shift;
    if (!found_program('unace')){
        warn ("Program unace not found. $file not processed.\n");
        return '';
    }
    if ($opt{l}){
        return "unace l '$file'" ;
    } else {
        return "unace x '$file'" ;
    }
}
# }}}
# {{{
sub bzip2 {
    my $file = shift;
    return z7($file) if $z7;
    if ($opt{l}){
        return "bunzip2 -c '$file'" ;
    } else {
        return "bunzip2 '$file'" ;
    }
}
# }}}
# {{{
sub cpio {
    my $file = shift;
    return z7($file) if $z7;
    if ($opt{l}){
        return "cpio -t '$file'" ;
    } else {
        return "cpio -i '$file'" ;
    }
} 
# }}}
# {{{
sub dpkg {
    my $file = shift;
    return z7($file) if $z7;
    if (!found_program('dpkg') and !found_program('ar')){
        warn ("Program dpkg and ar not found. $file not processed.\n");
        return '';
    }
    my $dpkg = 1;
    `dpkg --version` or $dpkg = 0;
    if ($opt{l}){
        if ($dpkg){
            return "dpkg -l '$file'" ;
        } else {
            return "ar t '$file'" ;
        }
    } else {
        if ($dpkg){
            return "dpkg -x '$file'" ;
        } else {
            return "ar x '$file'" ;
        }
    }
} 
# }}}
# {{{
sub gzip {
    my $file = shift;
    if ($opt{l}){
        return "gunzip -c '$file'" ;
    } else {
        return "gunzip '$file'" ;
    }
}
# }}}
# {{{
sub iso {
    my $file = shift;
    return z7($file) if ($z7);
    if ($opt{l}){
        if (!found_program('isoinfo')){
            warn ("Program isoinfo not found. $file not processed.\n");
            return '';
        }
        return "isoinfo -l '$file'";
    } else {
        warn ("Program 7z not found. $file not processed.\n");
        return "";
    }
}
# }}}
# {{{
sub kmz {
    my $file = shift;
    if (!$z7){
        warn ("Program 7z not found. $file not processed.\n");
        return '';
    }
    my $name = $file;
    $name =~ s/\.kmz//;
    if ($opt{l}){
        return "7z l '$file'" ;
    } else {
        return "7z x '$file'; mv -vi doc.kml '$name.kml'";
    }
}
# }}}
# {{{
sub lzma {
    my $file = shift;
    return z7($file) if ($z7);
    if (!found_program('unlzma')){
        warn ("Program unlzma not found. $file not processed.\n");
        return '';
    }
    if ($opt{l}){
        return "unlzma -c '$file'";
    } else {
        return "unlzma '$file'";
    }
}
# }}}
# {{{
sub rar {
    my $file = shift;
    return z7($file) if $z7;
    if (!found_program('unrar')){
        warn ("Program unrar not found. $file not processed.\n");
        return '';
    }
    if ($opt{l}){
        return "unrar l '$file'" ;
    } else {
        return "unrar x -ad '$file'" ;
    }
}
# }}}
# {{{
sub rpm {
    my $file = shift;
    return z7($file) if ($z7);
    if ($opt{l}){
        if (!found_program('rpm')){
            warn ("Program rpm not found. $file not processed.\n");
            return '';
        }
        return "rpm -ql '$file'" ; # Test pending
    } else {
        if (!found_program('rpm2cpio')){
            warn ("Program rpm2cpio not found. $file not processed.\n");
            return '';
        }
        if (!found_program('cpio')){
            warn ("Program cpio not found. $file not processed.\n");
            return '';
        }
        return "rpm2cpio   '$file'|cpio -idmv";
    }
}
# }}}
# {{{
sub tar {
    my $file = shift;
    if ($opt{l}){
        return "tar -tvf '$file'|tarcolor" ;
    } else {
        return "tar -xvf '$file'" ;
    }
}
# }}}
# {{{
sub xz {
    my $file = shift;
    return z7($file) if $z7;
    if ($opt{l}){
        return "unxz -l '$file'" ;
    } else {
        return "unxz '$file'" ;
    }
}
# }}}
# {{{
sub z {
    my $file = shift;
    return z7($file) if $z7;
    if ($opt{l}){
        return "uncompress -l '$file'" ;
    } else {
        return "uncompress '$file'" ;
    }
}
# }}}
# {{{
sub zip {
    my $file = shift;
    return z7($file) if $z7;
    if ($opt{l}){
        return "unzip -l '$file'" ;
    } else {
        return "unzip '$file'" ;
    }
}
# }}}
# {{{
sub z7 {
    my $file = shift;
    if ($opt{l}){
        return "7z l '$file'" ;
    } else {
        return "7z x '$file'" ;
    }
}
# }}}
